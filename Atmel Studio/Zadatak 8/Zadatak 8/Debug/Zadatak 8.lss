
Zadatak 8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001ac  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009f0  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b0  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000470  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  0000192c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fe  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d1  00000000  00000000  00001e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000020df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c8 00 	call	0x190	; 0x190 <main>
  9e:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_init>:
void uart_init(void)
{
	// Registri UBRR0H I UBRR0L zajedno èine djelitelj brzine komunikacije
	// UBRRH_VALUE je vrijednost gornjeg bajta djelitelja koji je izraèunat u
	// biblioteci setbaud.h
	UBRR0H = UBRRH_VALUE;
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	// UBBRL_VALUE je vrijednost donjeg bajta djelitelja koji je izraèunat u
	// biblioteci setbaud.h
	UBRR0L = UBRRL_VALUE;
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	#if USE_2X
	// Ako se koristi postavlja se U2X0 registar u 1
	UCSR0A |= _BV(U2X0);
	#else
	// Ako ne postavlja se u 0
	UCSR0A &= ~(_BV(U2X0));
  b0:	e0 ec       	ldi	r30, 0xC0	; 192
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	80 83       	st	Z, r24
	#endif
	// Omoguæavanje 8-bitnih podataka
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	// Omoguæavanje RX i TX pinova
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  c6:	08 95       	ret

000000c8 <uart_putchar>:
// Funkcija koja postavlja znak u podatkovni registar
void uart_putchar(char c)
{
	// Petlja koja èeka dok podatkovni registar nije prazan
	// Kada se registar isprazni nastavlja se izvršavanje koda
	while (!(UCSR0A & (1 << UDRE0)));
  c8:	e0 ec       	ldi	r30, 0xC0	; 192
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	95 ff       	sbrs	r25, 5
  d0:	fd cf       	rjmp	.-6      	; 0xcc <uart_putchar+0x4>
	
	// Postavlja znak u podatkovni registar
	UDR0 = c;
  d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  d6:	08 95       	ret

000000d8 <uart_write>:
}
// Funkcija koja prihvaæa string te ispisuje sadržaj
void uart_write(char* c)
{
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	ec 01       	movw	r28, r24
	// Petlja kreæe od 0 te se poveæava za 1 svakim prolaskom
	// Ako je i-ti znak string-a \0 (znak za završetak string-a u C/C++)
	// program izlazi iz petlje
	for (int i = 0; c[i] != '\0'; i++) {
  de:	88 81       	ld	r24, Y
  e0:	88 23       	and	r24, r24
  e2:	31 f0       	breq	.+12     	; 0xf0 <uart_write+0x18>
  e4:	21 96       	adiw	r28, 0x01	; 1
		// Za svaki znak se poziva funkcija uart_putchar
		uart_putchar(c[i]);
  e6:	0e 94 64 00 	call	0xc8	; 0xc8 <uart_putchar>
void uart_write(char* c)
{
	// Petlja kreæe od 0 te se poveæava za 1 svakim prolaskom
	// Ako je i-ti znak string-a \0 (znak za završetak string-a u C/C++)
	// program izlazi iz petlje
	for (int i = 0; c[i] != '\0'; i++) {
  ea:	89 91       	ld	r24, Y+
  ec:	81 11       	cpse	r24, r1
  ee:	fb cf       	rjmp	.-10     	; 0xe6 <uart_write+0xe>
		// Za svaki znak se poziva funkcija uart_putchar
		uart_putchar(c[i]);
	}
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <uart_writeln>:

// Funkcija ispisuje string iz argumenta i dodaje znak nove linije na kraj
void uart_writeln(char* c)
{
	uart_write(c);
  f6:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_write>
	uart_write("\n");
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_write>
 102:	08 95       	ret

00000104 <loop>:
	}
}

void loop()
{
	int SW_state = PINB & 0b000011;
 104:	83 b1       	in	r24, 0x03	; 3
 106:	83 70       	andi	r24, 0x03	; 3
 108:	90 e0       	ldi	r25, 0x00	; 0

	// Lijevo tipkalo pritisnuto
	if (SW_state == 0b01) {
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	91 05       	cpc	r25, r1
 10e:	81 f4       	brne	.+32     	; 0x130 <loop+0x2c>
		svjetlina -= 10;
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 114:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 118:	0a 97       	sbiw	r24, 0x0a	; 10
		if (svjetlina < 0)
 11a:	2a f0       	brmi	.+10     	; 0x126 <loop+0x22>
{
	int SW_state = PINB & 0b000011;

	// Lijevo tipkalo pritisnuto
	if (SW_state == 0b01) {
		svjetlina -= 10;
 11c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 124:	1b c0       	rjmp	.+54     	; 0x15c <loop+0x58>
		if (svjetlina < 0)
		svjetlina = 0;
 126:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 12a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 12e:	16 c0       	rjmp	.+44     	; 0x15c <loop+0x58>
	}
	else if (SW_state == 0b10) {
 130:	02 97       	sbiw	r24, 0x02	; 2
 132:	a1 f4       	brne	.+40     	; 0x15c <loop+0x58>
		svjetlina += 10;
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 138:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 13c:	0a 96       	adiw	r24, 0x0a	; 10
		if (svjetlina > 255)
 13e:	8f 3f       	cpi	r24, 0xFF	; 255
 140:	91 05       	cpc	r25, r1
 142:	09 f0       	breq	.+2      	; 0x146 <loop+0x42>
 144:	2c f4       	brge	.+10     	; 0x150 <loop+0x4c>
		svjetlina -= 10;
		if (svjetlina < 0)
		svjetlina = 0;
	}
	else if (SW_state == 0b10) {
		svjetlina += 10;
 146:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 14a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 14e:	06 c0       	rjmp	.+12     	; 0x15c <loop+0x58>
		if (svjetlina > 255)
		svjetlina = 255;
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 158:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	uart_write("Svjetlina: ");
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_write>
	uart_writeln(svjetlina);
 164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 168:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 16c:	0e 94 7b 00 	call	0xf6	; 0xf6 <uart_writeln>

	TCCR2A = _BV(COM2A1) | _BV(COM2B1) | _BV(WGM21) | _BV(WGM20);
 170:	83 ea       	ldi	r24, 0xA3	; 163
 172:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	TCCR2B = _BV(CS22);
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	// Postavljanje duty cycle
	OCR2A = 255 - svjetlina;
 17c:	e0 e0       	ldi	r30, 0x00	; 0
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	80 81       	ld	r24, Z
 182:	80 95       	com	r24
 184:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	OCR2B = svjetlina;
 188:	80 81       	ld	r24, Z
 18a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
 18e:	08 95       	ret

00000190 <main>:
int main(void)
{
	// Tipkala
	//pinMode(8, INPUT_PULLUP);
	//pinMode(9, INPUT_PULLUP);
	DDRB &= 0b111100;
 190:	84 b1       	in	r24, 0x04	; 4
 192:	8c 73       	andi	r24, 0x3C	; 60
 194:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0b000011;
 196:	85 b1       	in	r24, 0x05	; 5
 198:	83 60       	ori	r24, 0x03	; 3
 19a:	85 b9       	out	0x05, r24	; 5

	// LED-ice
	//pinMode(3, OUTPUT);
	DDRD |= 0b00001000;
 19c:	53 9a       	sbi	0x0a, 3	; 10

	//Serial.begin(9600);
	uart_init();
 19e:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_init>
	
	while (1)
	{
		loop();
 1a2:	0e 94 82 00 	call	0x104	; 0x104 <loop>
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <main+0x12>

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
