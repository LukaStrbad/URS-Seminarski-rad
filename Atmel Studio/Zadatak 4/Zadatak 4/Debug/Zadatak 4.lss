
Zadatak 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000172  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a28  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079b  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000043e  00000000  00000000  000014cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00001910  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003eb  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a9  00000000  00000000  00001ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002088  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 33       	cpi	r26, 0x3C	; 60
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  9e:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_init>:
void uart_init(void)
{
	// Registri UBRR0H I UBRR0L zajedno èine djelitelj brzine komunikacije
	// UBRRH_VALUE je vrijednost gornjeg bajta djelitelja koji je izraèunat u
	// biblioteci setbaud.h
	UBRR0H = UBRRH_VALUE;
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	// UBBRL_VALUE je vrijednost donjeg bajta djelitelja koji je izraèunat u
	// biblioteci setbaud.h
	UBRR0L = UBRRL_VALUE;
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	#if USE_2X
	// Ako se koristi postavlja se U2X0 registar u 1
	UCSR0A |= _BV(U2X0);
	#else
	// Ako ne postavlja se u 0
	UCSR0A &= ~(_BV(U2X0));
  b0:	e0 ec       	ldi	r30, 0xC0	; 192
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	80 83       	st	Z, r24
	#endif
	// Omoguæavanje 8-bitnih podataka
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	// Omoguæavanje RX i TX pinova
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  c6:	08 95       	ret

000000c8 <uart_putchar>:
// Funkcija koja postavlja znak u podatkovni registar
void uart_putchar(char c)
{
	// Petlja koja èeka dok podatkovni registar nije prazan
	// Kada se registar isprazni nastavlja se izvršavanje koda
	while (!(UCSR0A & (1 << UDRE0)));
  c8:	e0 ec       	ldi	r30, 0xC0	; 192
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	95 ff       	sbrs	r25, 5
  d0:	fd cf       	rjmp	.-6      	; 0xcc <uart_putchar+0x4>
	
	// Postavlja znak u podatkovni registar
	UDR0 = c;
  d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  d6:	08 95       	ret

000000d8 <uart_write>:
}
// Funkcija koja prihvaæa string te ispisuje sadržaj
void uart_write(char* c)
{
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	ec 01       	movw	r28, r24
	// Petlja kreæe od 0 te se poveæava za 1 svakim prolaskom
	// Ako je i-ti znak string-a \0 (znak za završetak string-a u C/C++)
	// program izlazi iz petlje
	for (int i = 0; c[i] != '\0'; i++) {
  de:	88 81       	ld	r24, Y
  e0:	88 23       	and	r24, r24
  e2:	31 f0       	breq	.+12     	; 0xf0 <uart_write+0x18>
  e4:	21 96       	adiw	r28, 0x01	; 1
		// Za svaki znak se poziva funkcija uart_putchar
		uart_putchar(c[i]);
  e6:	0e 94 64 00 	call	0xc8	; 0xc8 <uart_putchar>
void uart_write(char* c)
{
	// Petlja kreæe od 0 te se poveæava za 1 svakim prolaskom
	// Ako je i-ti znak string-a \0 (znak za završetak string-a u C/C++)
	// program izlazi iz petlje
	for (int i = 0; c[i] != '\0'; i++) {
  ea:	89 91       	ld	r24, Y+
  ec:	81 11       	cpse	r24, r1
  ee:	fb cf       	rjmp	.-10     	; 0xe6 <uart_write+0xe>
		// Za svaki znak se poziva funkcija uart_putchar
		uart_putchar(c[i]);
	}
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <uart_writeln>:

// Funkcija ispisuje string iz argumenta i dodaje znak nove linije na kraj
void uart_writeln(char* c)
{
	uart_write(c);
  f6:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_write>
	uart_write("\n");
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_write>
 102:	08 95       	ret

00000104 <loop>:
}

void loop()
{
	// Stanje SW1
	uart_write("SW1:\t");
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_write>
	uart_write((PIND & 0b10000000) >> 7);
 10c:	89 b1       	in	r24, 0x09	; 9
 10e:	88 1f       	adc	r24, r24
 110:	88 27       	eor	r24, r24
 112:	88 1f       	adc	r24, r24
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_write>
	// Stanje SW2
	uart_write("\tSW2:\t");
 11a:	8a e0       	ldi	r24, 0x0A	; 10
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_write>
	uart_write((PIND & 0b01000000) >> 6);
 122:	89 b1       	in	r24, 0x09	; 9
 124:	86 fb       	bst	r24, 6
 126:	88 27       	eor	r24, r24
 128:	80 f9       	bld	r24, 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_write>

	if ((PIND & 0b11000000) >> 6 != 0b11) {
 130:	89 b1       	in	r24, 0x09	; 9
 132:	82 95       	swap	r24
 134:	86 95       	lsr	r24
 136:	86 95       	lsr	r24
 138:	83 70       	andi	r24, 0x03	; 3
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	31 f0       	breq	.+12     	; 0x14a <loop+0x46>
		//digitalWrite(5, HIGH);
		PORTD |= 0b00100000;
 13e:	5d 9a       	sbi	0x0b, 5	; 11
		uart_writeln("\tUvjet Zadovoljen!");
 140:	81 e1       	ldi	r24, 0x11	; 17
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 7b 00 	call	0xf6	; 0xf6 <uart_writeln>
 148:	08 95       	ret
	}
	else {
		//digitalWrite(5, LOW);
		PORTD &= 0b11011111;
 14a:	5d 98       	cbi	0x0b, 5	; 11
		uart_writeln("\tUvjet nije zadovoljen!");
 14c:	84 e2       	ldi	r24, 0x24	; 36
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 7b 00 	call	0xf6	; 0xf6 <uart_writeln>
 154:	08 95       	ret

00000156 <main>:
int main(void)
{
	// Tipkala
	//pinMode(6, INPUT_PULLUP);
	//pinMode(7, INPUT_PULLUP);
	DDRD &= 0b00111111;
 156:	8a b1       	in	r24, 0x0a	; 10
 158:	8f 73       	andi	r24, 0x3F	; 63
 15a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 0b11000000;
 15c:	8b b1       	in	r24, 0x0b	; 11
 15e:	80 6c       	ori	r24, 0xC0	; 192
 160:	8b b9       	out	0x0b, r24	; 11

	// LED
	//pinMode(5, OUTPUT);
	DDRD |= 0b00100000;
 162:	55 9a       	sbi	0x0a, 5	; 10

	//Serial.begin(9600);
	uart_init();
 164:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_init>

	while (1)
	{
		loop();
 168:	0e 94 82 00 	call	0x104	; 0x104 <loop>
 16c:	fd cf       	rjmp	.-6      	; 0x168 <main+0x12>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
