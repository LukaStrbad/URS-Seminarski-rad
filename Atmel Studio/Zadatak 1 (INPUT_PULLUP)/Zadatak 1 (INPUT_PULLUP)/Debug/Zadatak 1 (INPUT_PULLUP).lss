
Zadatak 1 (INPUT_PULLUP).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000013c  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  000001dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e1  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a1  00000000  00000000  00000ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000414  00000000  00000000  00001446  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  0000185c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000410  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a9  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00001ff9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  9e:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_init>:

// Funkcija koja prihvaæa broj i ispisuje ga
void uart_writeNum(int number)
{
	// Pozivanjem metode int_to_charptr se broj pretvara u niz znakova/string
	uart_write(int_to_charptr(number));
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  b0:	e0 ec       	ldi	r30, 0xC0	; 192
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	80 83       	st	Z, r24
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  c6:	08 95       	ret

000000c8 <uart_putchar>:
  c8:	e0 ec       	ldi	r30, 0xC0	; 192
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	95 ff       	sbrs	r25, 5
  d0:	fd cf       	rjmp	.-6      	; 0xcc <uart_putchar+0x4>
  d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  d6:	08 95       	ret

000000d8 <uart_write>:
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	ec 01       	movw	r28, r24
  de:	88 81       	ld	r24, Y
  e0:	88 23       	and	r24, r24
  e2:	31 f0       	breq	.+12     	; 0xf0 <uart_write+0x18>
  e4:	21 96       	adiw	r28, 0x01	; 1
  e6:	0e 94 64 00 	call	0xc8	; 0xc8 <uart_putchar>
  ea:	89 91       	ld	r24, Y+
  ec:	81 11       	cpse	r24, r1
  ee:	fb cf       	rjmp	.-10     	; 0xe6 <uart_write+0xe>
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <uart_writeNumLn>:
}

// Funkcija ispisuje broj i dodaje znak nove linije
void uart_writeNumLn(int number)
{
	uart_write(number);
  f6:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_write>
	uart_write("\n");
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_write>
 102:	08 95       	ret

00000104 <loop>:

void loop()
{
	// ARDUINO NAREDBA: button = digitalRead(pin_SW1);
	// Èitanje vrijednosti pina 2
	button = (PIND & 0b00000100) >> 2;
 104:	89 b1       	in	r24, 0x09	; 9
 106:	82 fb       	bst	r24, 2
 108:	88 27       	eor	r24, r24
 10a:	80 f9       	bld	r24, 0
 10c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 110:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
	
	
	// ARDUINO NAREDBA: Serial.print("SW1: \t");
	// Ispis teksta
	uart_write("SW1: \t");
 114:	84 e0       	ldi	r24, 0x04	; 4
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_write>
	// ARDUINO NAREDBA: Serial.println(button1);
	// 0 - pritisnuto
	// 1 - nije pritisnuto
	// Ispis stanja pina
	uart_writeNumLn(button);
 11c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 120:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 124:	0e 94 7b 00 	call	0xf6	; 0xf6 <uart_writeNumLn>
 128:	08 95       	ret

0000012a <main>:
int main(void)
{
	// ARDUINO NAREDBA: pinMode(2, INPUT_PULLUP);
	// Inicijalizacija pina 2 da bude ulazni sa ukljuèenim unutrašnjim otpornikom
	// Postavljanje DDR registra u 0
	DDRD &= 0b11111011;
 12a:	52 98       	cbi	0x0a, 2	; 10
	// Postavljanje PORT registra u 1
	PORTD |= 0b00000100;
 12c:	5a 9a       	sbi	0x0b, 2	; 11
	
	// ARDUINO NAREDBA: Serial.begin(9600);
	// Inicijalizacija UART serijske komunikacije
	uart_init();
 12e:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_init>
	
	while (1)
	{
		loop();
 132:	0e 94 82 00 	call	0x104	; 0x104 <loop>
 136:	fd cf       	rjmp	.-6      	; 0x132 <main+0x8>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
